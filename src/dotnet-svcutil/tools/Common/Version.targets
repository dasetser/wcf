<!--
****************************************************************************************************
Project global versioning targets.
****************************************************************************************************-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Input parameters -->

  <!--
****************************************************************************************************
Project global version targets.

Full version: <VersionMajor>.<VersionMinor>.<VersionBuild>.<VersionRevision>
NuGet Version: <VersionMajor>.<VersionMinor>.<VersionRelease>

Relevant parameters: 
* BUILD_GENERATED_VERSION macro:
  Preprocessor macro to conditionally exclude version parameters in code, i.e.: C# AssemblyInfo.cs attributes
* VersionFileAttribute item group:
  Used to add assembly-level attributes to the generated version file, ex:.
  <VersionFileAttribute Include="[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(&quot;Microsoft.Usage&quot;, &quot;CA2243:AttributeStringLiteralsShouldParseCorrectly&quot;, Justification=&quot;Justification here&quot;)]" />
* VersionFileGenerationEnabled property: 
  When set to false, disables automatic version generation.
* VersionStartYear property: Required parameters.
	Used for computing the VersionBuild first digit. Used to calculate the number of years passed since the start year.
* VersionMajor/VersionMinor: Required parameters.
  Input parameters defining the major and minor version values.
* VersionTimeSeed parameter:
  A string representing a time that can be parsed using DateTime.Parse method, used to compute the VersionRevision.
* VersionRevision parameter (default: 0):
  The fourth field of the file full version. If VersionTimeSeed is provided, it's value is computed from the number of minutes in the seed.
* VersionPatch parameter (default: 0):
  The fourth field of the assembly full version. Normally used for servicing (patches).
* VersionRelease property (default: VersionBuild):
  Normally used with NuGet packages and C# assembly's Informational Version.  Can contain a string for pre-release values.
* VersionPrerel property (default: empty):
  A pre-release string. If present, it is appended to the VersionRelease value.
****************************************************************************************************-->

  <PropertyGroup>
    <CSharpProject Condition="'$(MSBuildProjectExtension)' == '.csproj'">true</CSharpProject>
  </PropertyGroup>

  <PropertyGroup>
    <VersionFileGenerationEnabled Condition="'$(VersionFileGenerationEnabled)' == '' AND '$(CSharpProject)' == 'true'">true</VersionFileGenerationEnabled>
    <VersionFileGenerationEnabled Condition="'$(VersionFileGenerationEnabled)' != 'true'">false</VersionFileGenerationEnabled>
  </PropertyGroup>

  <PropertyGroup>
    <VersionStartYear Condition="'$(VersionStartYear)' == ''">INVALID_VersionStartYear</VersionStartYear>
    <VersionMajor Condition="'$(VersionMajor)' == ''">INVALID_VersionMajor</VersionMajor>
    <VersionMinor Condition="'$(VersionMinor)' == ''">INVALID_VersionMinor</VersionMinor>
    <VersionBuild Condition="'$(VersionBuild)' == '' AND '$(VersionStartYear)' == 'INVALID_VersionStartYear'">INVALID_VersionBuild</VersionBuild>
    <VersionBuild Condition="'$(VersionBuild)' == '' OR '$(VersionBuild)' == '0'">$([MSBuild]::Add(1, $([MSBuild]::Subtract($([System.DateTime]::Now.Year), $(VersionStartYear)))))$([System.DateTime]::Now.ToString("MMdd"))</VersionBuild>
    <VersionPatch Condition="'$(VersionPatch)' == ''">0</VersionPatch>
  </PropertyGroup>
  <PropertyGroup Condition="'$(VersionRevision)' == '' AND '$(VersionTimeSeed)' != ''">
    <VersionTimeSeed>$(VersionTimeSeed.Replace('"', ''))</VersionTimeSeed>
    <VersionDateTime>$([System.DateTime]::Parse('$(VersionTimeSeed)'))</VersionDateTime>
    <VersionDateTimeHourInMins>$([MSBuild]::Multiply($([System.DateTime]::Parse('$(VersionDateTime)').Hour), 60))</VersionDateTimeHourInMins>
    <VersionDateTimeMins>$([System.DateTime]::Parse('$(VersionDateTime)').Minute)</VersionDateTimeMins>
    <VersionDateTimeTotalMins>$([MSBuild]::Add('$(VersionDateTimeHourInMins)', '$(VersionDateTimeMins)'))</VersionDateTimeTotalMins>
    <VersionRevision>$([System.Int32]::Parse('$(VersionDateTimeTotalMins)').ToString("D4"))</VersionRevision>
  </PropertyGroup>
  <PropertyGroup>
    <VersionRevision Condition="'$(VersionRevision)' == ''">0</VersionRevision>
    <VersionRelease Condition="'$(VersionRelease)' == ''">$(VersionBuild).$(VersionRevision)</VersionRelease>
    <VersionRelease Condition="'$(VersionPrerel)' != ''">$(VersionRelease)$(VersionPrerel)</VersionRelease>
  </PropertyGroup>

  <!-- Computed parameters -->

  <PropertyGroup>
    <AssemblyVersion>$(VersionMajor).$(VersionMinor).0.$(VersionPatch)</AssemblyVersion>
    <AssemblyFileVersion>$(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision)</AssemblyFileVersion>
    <AssemblyInformationalVersion Condition="'$(VersionRelease)' != ''">$(VersionMajor).$(VersionMinor).$(VersionRelease)</AssemblyInformationalVersion>
    <AssemblyInformationalVersion Condition="'$(AssemblyInformationalVersion)' == ''">$(AssemblyFileVersion)</AssemblyInformationalVersion>
    <AssemblyVersionFile Condition="'$(AssemblyVersionFile)' == '' AND '$(CSharpProject)' == 'true'">$(IntermediateOutputPath)$(MSBuildProjectName).version.cs</AssemblyVersionFile>
    <AssemblyVersionFile Condition="'$(AssemblyVersionFile)' == '' AND '$(CppProject)' == 'true'">$(IntermediateOutputPath)$(MSBuildProjectName).version.rc</AssemblyVersionFile>
    <AssemblyName Condition="'$(AssemblyName)' == ''">$(TargetName)$(TargetExtension)</AssemblyName>
    <AssemblyInternalName Condition="'$(AssemblyInternalName)' == ''">$(AssemblyName)</AssemblyInternalName>
    <SatelliteContractVersion Condition="'$(SatelliteContractVersion)' == ''">$(AssemblyVersion)</SatelliteContractVersion>
  </PropertyGroup>

  <PropertyGroup>
    <NuGetPackageVersion Condition="'$(NuGetPackageVersion)' == ''">$(AssemblyInformationalVersion)</NuGetPackageVersion>
  </PropertyGroup>

  <ItemGroup Condition="'$(VersionFileGenerationEnabled)' == 'true'">
    <Compile Include="$(AssemblyVersionFile)" Condition="'$(CSharpProject)' == 'true'" />
  </ItemGroup>

  <ItemGroup Condition="'$(VersionFileGenerationEnabled)' == 'true'">
    <Clean Include="$(AssemblyVersionFile)" Condition="Exists('$(AssemblyVersionFile)')" />
  </ItemGroup>

  <PropertyGroup Condition="'$(VersionFileGenerationEnabled)' == 'true'">
    <DefineConstants>$(DefineConstants);BUILD_GENERATED_VERSION</DefineConstants>
  </PropertyGroup>

  <!--
 ==================================================================================================
 GetVersion target: exposes computed VersionBuild for consumers like VSIX (SDK).
 ================================================================================================== -->
  <Target Name="GetBuildVersion" Outputs="$(VersionBuild)" />
  <Target Name="GetAssemblyVersion" Outputs="$(AssemblyVersion)" />
  <Target Name="GetAssemblyFileVersion" Outputs="$(AssemblyFileVersion)" />
  <Target Name="GetAssemblyInformationalVersion" Outputs="$(AssemblyInformationalVersion)" />

  <!--
 ==================================================================================================
 GenerateVersionFile target: generates version file.
 ================================================================================================== -->
  <PropertyGroup Condition="'$(VersionFileGenerationEnabled)' == 'true'">
    <GenerateVersionFileDependsOn>
      BeforeGenerateVersionFile;ValidateVersionValues;GenerateVersionLines;ShouldGenerateVersionFile;GenerateVersionFileCore;AfterGenerateVersionFile
    </GenerateVersionFileDependsOn>
  </PropertyGroup>

  <Target Name="BeforeGenerateVersionFile" />
  <Target Name="AfterGenerateVersionFile" />

  <!--
 ==================================================================================================
 GenerateVersionFile target: generates the assembly attributes source file to be included 
 in the items to compile for C# projects.
 ================================================================================================== -->
  <Target Name="GenerateVersionFile" BeforeTargets="CoreCompile" DependsOnTargets="$(GenerateVersionFileDependsOn)" Condition="'$(CSharpProject)' == 'true'" />

  <Target Name="GenerateVersionFileCore" Condition="'$(ShouldGenerateVersionFile)' == 'true'" >
    <WriteLinesToFile File="$(AssemblyVersionFile)" Lines="@(VersionLineToWrite)" Overwrite="true"  Encoding="Unicode"/>
    <Message Text="Assembly Version File: $(AssemblyVersionFile)" />
  </Target>


  <!--
 ==================================================================================================
 GenerateVersionLines target: generates the assembly attributes text
 ================================================================================================== -->
  <Target Name="GenerateVersionLines">
    <ItemGroup>
      <VersionLineToWrite Include="// $(SourceFileCopyright)" Condition="'$(SourceFileCopyright)' != ''"/>
      <VersionLineToWrite Include="// &lt;auto-generated&gt;" />
      <VersionLineToWrite Include="//   This code was generated by a tool." />
      <VersionLineToWrite Include="// &lt;/auto-generated&gt;" />
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyTitle(&quot;$(AssemblyTitle)&quot;)]" Condition="'$(AssemblyTitle)' != ''"/>
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyProduct(&quot;$(AssemblyProduct)&quot;)]" Condition="'$(AssemblyProduct)' != ''"/>
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyCompany(&quot;$(AssemblyCompany)&quot;)]" Condition="'$(AssemblyCompany)' != ''"/>
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyTrademark(&quot;$(AssemblyTrademark)&quot;)]" Condition="'$(AssemblyTrademark)' != ''"/>
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyCopyright(&quot;$(AssemblyCopyright)&quot;)]" Condition="'$(AssemblyCopyright)' != ''"/>
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyDescription(&quot;$(AssemblyDescription)&quot;)]" Condition="'$(AssemblyDescription)' != ''"/>
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyDelaySign(true)]" Condition="'$(DelaySign)' == 'true'" />
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyKeyFile(%40&quot;$(AssemblyOriginatorKeyFile)&quot;)]" Condition="'$(SignAssembly)' != ''"/>
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyVersion(&quot;$(AssemblyVersion)&quot;)]" Condition="'$(AssemblyVersion)' != ''"/>
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyFileVersion(&quot;$(AssemblyFileVersion)&quot;)]" Condition="'$(AssemblyFileVersion)' != ''"/>
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyInformationalVersion(&quot;$(AssemblyInformationalVersion)&quot;)]" Condition="'$(AssemblyInformationalVersion)' != ''" />
      <VersionLineToWrite Include="[assembly: System.Reflection.AssemblyMetadata(&quot;Serviceable&quot;, &quot;True&quot;)]" Condition="'$(AssemblyServiceable)' == 'true'"/>
      <VersionLineToWrite Include="[assembly: System.Resources.SatelliteContractVersionAttribute(&quot;$(SatelliteContractVersion)&quot;)]" Condition="'$(SatelliteContractVersion)' != ''"/>
      <VersionLineToWrite Include="@(VersionFileAttribute)" Condition="'@(VersionFileAttribute)' != ''" />
    </ItemGroup>
  </Target>

  <!--
 ==================================================================================================
 ShouldGenerateVersionFile target: determines whether a version file needs to be generated.
 Required for incremental build support.
 ================================================================================================== -->
  <Target Name="ShouldGenerateVersionFile" Condition="'$(CSharpProject)' == 'true'" DependsOnTargets="GenerateVersionLines">
    <ReadLinesFromFile File="$(AssemblyVersionFile)" Condition="Exists('$(AssemblyVersionFile)')">
      <Output ItemName="VersionLineRead" TaskParameter="Lines"/>
    </ReadLinesFromFile>
    <PropertyGroup>
      <ShouldGenerateVersionFile Condition="'$(ForceGenerateVersionFile)' == 'true' OR '@(VersionLineRead)' != '@(VersionLineToWrite)'">true</ShouldGenerateVersionFile>
      <ShouldGenerateVersionFile Condition="'$(ShouldGenerateVersionFile)' == ''">false</ShouldGenerateVersionFile>
    </PropertyGroup>
  </Target>

  <Target Name="ValidateVersionValues">
    <ItemGroup>
      <VersionError Include="VersionMajor" Condition="'$(VersionMajor)' == 'INVALID_VersionMajor'" />
      <VersionError Include="VersionMinor" Condition="'$(VersionMinor)' == 'INVALID_VersionMinor'" />
      <VersionError Include="VersionBuild" Condition="'$(VersionBuild)' == 'INVALID_VersionBuild'" />
    </ItemGroup>
    <Error Text="@(VersionError -> '%(Identity) has not been defined!', '%0A')" Condition="'@(VersionError)' != ''" />
    <!-- Throw if any of the version values is not int32 -->
    <PropertyGroup>
      <VersionMajor>$([System.Convert]::ToInt32('$(VersionMajor)'))</VersionMajor>
      <VersionMinor>$([System.Convert]::ToInt32('$(VersionMinor)'))</VersionMinor>
      <VersionBuild>$([System.Convert]::ToInt32('$(VersionBuild)'))</VersionBuild>
      <VersionRevision>$([System.Convert]::ToInt32('$(VersionRevision)'))</VersionRevision>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <!--Force a rebuild if this file is changes -->
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>
</Project>
